{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/aaa.md","hash":"4bc031c9f6ba0b8219f75c51cbef0bfb2ec57bdb","modified":1629095219849},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1628870595294},{"_id":"source/_posts/spooldb.md","hash":"b65b0c4d176c9bf41b6a4613d25ab5a8f5742843","modified":1629099646722},{"_id":"source/_posts/spooldb1.md","hash":"f105feb9bd881a291d4a574e7157ef389583e10b","modified":1629099765449},{"_id":"source/_posts/spooldb2.md","hash":"69cbbb15ed680bd6165b4c3b0961116e558d8d2e","modified":1629099838442},{"_id":"source/_posts/test.md","hash":"f639ace83e91e085c7a3bd5f652b73c0fb1b671d","modified":1628872771654},{"_id":"source/_posts/我的第一篇博文.md","hash":"8ec05313042d1fba3c9c02d64173d0d2e2a515d8","modified":1628870595294},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"9a94875cbf4c27fbe2e63da0496242addc6d2876","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":1628870595037},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1628870595041},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1628870595041},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1628870595044},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1628870595034},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1628870595037},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1628870595037},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1628870595037},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1628870595037},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1628870595037},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1628870595037},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1628870595037},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1628870595037},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1628870595037},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1628870595041},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1628870595044},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1628870595041},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1628870595041},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1628870595037},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1628870595037},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1628870595041},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1628870595041},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1628870595037},{"_id":"public/2021/08/16/spooldb2/index.html","hash":"bc659e386ad2d74ce9bdd762823e69dffd1d35bf","modified":1629099949983},{"_id":"public/2021/08/16/spooldb1/index.html","hash":"eaa6d8f945b82e40a5fa555bee852ab2f9696b1d","modified":1629099949983},{"_id":"public/2021/08/16/spooldb/index.html","hash":"1d5dd3d3530c611b4f6041972d8e595a08ad2a01","modified":1629099949983},{"_id":"public/2021/08/16/aaa/index.html","hash":"2e6fd62addc254d450644f96541e6bd5e8c3712b","modified":1629099949983},{"_id":"public/2021/08/14/test/index.html","hash":"155d737c6e74b026a359545dd67760d6ca689183","modified":1629099949983},{"_id":"public/2021/08/14/hello-world/index.html","hash":"bbee0565e9608e108ef30997d16b458316b4a42f","modified":1629099949983},{"_id":"public/2021/08/11/我的第一篇博文/index.html","hash":"6bad7d6afee8df0e0f38a16dbb6eb3b219008258","modified":1629099949983},{"_id":"public/archives/index.html","hash":"465e02bb1822d3be71ff32a2885776e3c0db5e6f","modified":1629099949983},{"_id":"public/archives/2021/index.html","hash":"a5c74db4a366000af6c833ccf1efa22cd79c6f80","modified":1629099949983},{"_id":"public/archives/2021/08/index.html","hash":"fb046c8b1e25062ea293855da06fb79dcdd069aa","modified":1629099949983},{"_id":"public/index.html","hash":"88210459dc930236afad6290164c3841e7d93807","modified":1629099949983},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1629099949983},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1629099949983},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1629099949983},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1629099949983},{"_id":"public/css/style.css","hash":"263d98c93ae32dda6f7bbc8473105f3c441aca99","modified":1629099949983},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1629099949983},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1629099949983},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1629099949983},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1629099949983},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1629099949983},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1629099949983},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1629099949983}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"aaa","date":"2021-08-16T06:26:59.000Z","_content":"","source":"_posts/aaa.md","raw":"---\ntitle: aaa\ndate: 2021-08-16 14:26:59\ntags:\n---\n","slug":"aaa","published":1,"updated":"2021-08-16T06:26:59.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksec1qvi0000qzwb1uzehd2s","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-08-13T16:03:15.294Z","updated":"2021-08-13T16:03:15.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksec1qvp0001qzwbhegy4vuc","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"spooldb","author":"John Doe","date":"2021-08-16T07:31:53.000Z","_content":"```\n<p>\nfrom multiprocessing import Pool\nimport os, time, random\nfrom datetime import datetime,timedelta\n\ndef long_time_task(ftime):\n    print('Run task %s (%s)...' % (ftime, os.getpid()))\n    start = time.time()\n    print(os.system(r\"sqlplus zhanghongjing/zhanghongjing@o39 @D:\\worknote\\zhaobin\\脚本及结果\\20210728审计数据01241-江宁\\sp_rtd.sql \" + ftime +\" 30>nul\"))\n    end = time.time()\n    print('Task %s runs %0.2f seconds.' % (ftime, (end - start)))\n\nif __name__=='__main__':\n    print('Parent process %s.' % os.getpid())\n    p = Pool(8)\n    start = time.time()\n    startftime = '201801010000'\n    endftime =   '202107281030'\n    i = 0\n    while startftime <= endftime:\n        p.apply_async(long_time_task, args=(startftime,))\n        ftimed = datetime.strptime(startftime,'%Y%m%d%H%M') + timedelta(minutes = 30)\n        i += 1\n        startftime = ftimed.strftime(\"%Y%m%d%H%M\")\n        \n    print('Waiting for all subprocesses done...')\n    p.close()\n    p.join()\n    end = time.time()\n    print('All subprocesses done.')\n    print('Task all runs %0.2f seconds.' % ((end - start)))\n </p>\n ```","source":"_posts/spooldb.md","raw":"title: spooldb\nauthor: John Doe\ndate: 2021-08-16 15:31:53\ntags:\n---\n```\n<p>\nfrom multiprocessing import Pool\nimport os, time, random\nfrom datetime import datetime,timedelta\n\ndef long_time_task(ftime):\n    print('Run task %s (%s)...' % (ftime, os.getpid()))\n    start = time.time()\n    print(os.system(r\"sqlplus zhanghongjing/zhanghongjing@o39 @D:\\worknote\\zhaobin\\脚本及结果\\20210728审计数据01241-江宁\\sp_rtd.sql \" + ftime +\" 30>nul\"))\n    end = time.time()\n    print('Task %s runs %0.2f seconds.' % (ftime, (end - start)))\n\nif __name__=='__main__':\n    print('Parent process %s.' % os.getpid())\n    p = Pool(8)\n    start = time.time()\n    startftime = '201801010000'\n    endftime =   '202107281030'\n    i = 0\n    while startftime <= endftime:\n        p.apply_async(long_time_task, args=(startftime,))\n        ftimed = datetime.strptime(startftime,'%Y%m%d%H%M') + timedelta(minutes = 30)\n        i += 1\n        startftime = ftimed.strftime(\"%Y%m%d%H%M\")\n        \n    print('Waiting for all subprocesses done...')\n    p.close()\n    p.join()\n    end = time.time()\n    print('All subprocesses done.')\n    print('Task all runs %0.2f seconds.' % ((end - start)))\n </p>\n ```","slug":"spooldb","published":1,"updated":"2021-08-16T07:40:46.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksec1qvs0002qzwbc8j79mjk","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">from multiprocessing import Pool</span><br><span class=\"line\">import os, time, random</span><br><span class=\"line\">from datetime import datetime,timedelta</span><br><span class=\"line\"></span><br><span class=\"line\">def long_time_task(ftime):</span><br><span class=\"line\">    print(&#x27;Run task %s (%s)...&#x27; % (ftime, os.getpid()))</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    print(os.system(r&quot;sqlplus zhanghongjing/zhanghongjing@o39 @D:\\worknote\\zhaobin\\脚本及结果\\20210728审计数据01241-江宁\\sp_rtd.sql &quot; + ftime +&quot; 30&gt;nul&quot;))</span><br><span class=\"line\">    end = time.time()</span><br><span class=\"line\">    print(&#x27;Task %s runs %0.2f seconds.&#x27; % (ftime, (end - start)))</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__==&#x27;__main__&#x27;:</span><br><span class=\"line\">    print(&#x27;Parent process %s.&#x27; % os.getpid())</span><br><span class=\"line\">    p = Pool(8)</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    startftime = &#x27;201801010000&#x27;</span><br><span class=\"line\">    endftime =   &#x27;202107281030&#x27;</span><br><span class=\"line\">    i = 0</span><br><span class=\"line\">    while startftime &lt;= endftime:</span><br><span class=\"line\">        p.apply_async(long_time_task, args=(startftime,))</span><br><span class=\"line\">        ftimed = datetime.strptime(startftime,&#x27;%Y%m%d%H%M&#x27;) + timedelta(minutes = 30)</span><br><span class=\"line\">        i += 1</span><br><span class=\"line\">        startftime = ftimed.strftime(&quot;%Y%m%d%H%M&quot;)</span><br><span class=\"line\">        </span><br><span class=\"line\">    print(&#x27;Waiting for all subprocesses done...&#x27;)</span><br><span class=\"line\">    p.close()</span><br><span class=\"line\">    p.join()</span><br><span class=\"line\">    end = time.time()</span><br><span class=\"line\">    print(&#x27;All subprocesses done.&#x27;)</span><br><span class=\"line\">    print(&#x27;Task all runs %0.2f seconds.&#x27; % ((end - start)))</span><br><span class=\"line\"> &lt;/p&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">from multiprocessing import Pool</span><br><span class=\"line\">import os, time, random</span><br><span class=\"line\">from datetime import datetime,timedelta</span><br><span class=\"line\"></span><br><span class=\"line\">def long_time_task(ftime):</span><br><span class=\"line\">    print(&#x27;Run task %s (%s)...&#x27; % (ftime, os.getpid()))</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    print(os.system(r&quot;sqlplus zhanghongjing/zhanghongjing@o39 @D:\\worknote\\zhaobin\\脚本及结果\\20210728审计数据01241-江宁\\sp_rtd.sql &quot; + ftime +&quot; 30&gt;nul&quot;))</span><br><span class=\"line\">    end = time.time()</span><br><span class=\"line\">    print(&#x27;Task %s runs %0.2f seconds.&#x27; % (ftime, (end - start)))</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__==&#x27;__main__&#x27;:</span><br><span class=\"line\">    print(&#x27;Parent process %s.&#x27; % os.getpid())</span><br><span class=\"line\">    p = Pool(8)</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    startftime = &#x27;201801010000&#x27;</span><br><span class=\"line\">    endftime =   &#x27;202107281030&#x27;</span><br><span class=\"line\">    i = 0</span><br><span class=\"line\">    while startftime &lt;= endftime:</span><br><span class=\"line\">        p.apply_async(long_time_task, args=(startftime,))</span><br><span class=\"line\">        ftimed = datetime.strptime(startftime,&#x27;%Y%m%d%H%M&#x27;) + timedelta(minutes = 30)</span><br><span class=\"line\">        i += 1</span><br><span class=\"line\">        startftime = ftimed.strftime(&quot;%Y%m%d%H%M&quot;)</span><br><span class=\"line\">        </span><br><span class=\"line\">    print(&#x27;Waiting for all subprocesses done...&#x27;)</span><br><span class=\"line\">    p.close()</span><br><span class=\"line\">    p.join()</span><br><span class=\"line\">    end = time.time()</span><br><span class=\"line\">    print(&#x27;All subprocesses done.&#x27;)</span><br><span class=\"line\">    print(&#x27;Task all runs %0.2f seconds.&#x27; % ((end - start)))</span><br><span class=\"line\"> &lt;/p&gt;</span><br></pre></td></tr></table></figure>"},{"title":"spooldb1","author":"John Doe","date":"2021-08-16T07:41:31.000Z","_content":"```\n<p>\nimport os, time, random, threading \nfrom datetime import datetime,timedelta\nfrom concurrent.futures import ThreadPoolExecutor, wait, ALL_COMPLETED\n\ndef long_time_task(ftime):\n    print('Run task %s (%s)...' % (ftime, threading.active_count()))\n    print('thread %s >>> %s' % (threading.current_thread().name, ftime))\n    start = time.time()\n    print(os.system(r\"sqlplus zhanghongjing/zhanghongjing@o39 @D:\\worknote\\zhaobin\\脚本及结果\\20210812丰台数据分析01240-郎维晨\\sp_rtd.sql \" + ftime +\" 30>nul\"))\n    end = time.time()\n    print('Task %s runs %0.2f seconds.' % (ftime, (end - start)))\n    #return res\n\n\n    \nif __name__=='__main__':\n\n\n    start = time.time()\n\n    i = 0\n    startftime = '201901010000'\n    endftime =   '202105312330'\n    \n    #executor = ThreadPoolExecutor(max_workers=25)\n    \n    pars = list()\n    while startftime <= endftime:\n        #t = executor.submit(long_time_task,startftime)\n        #print(\"in main : get page {}s success\".format(t))\n        pars.append(startftime)\n        ftimed = datetime.strptime(startftime,'%Y%m%d%H%M') + timedelta(minutes = 30)\n        i += 1\n        startftime = ftimed.strftime(\"%Y%m%d%H%M\")\n     \n    with ThreadPoolExecutor(max_workers=25) as executor:\n        executor.map(long_time_task,pars)\n        \n    \n    end = time.time()\n    print('All subprocesses done.')\n    print('Task all runs %0.2f seconds.' % ((end - start)))\n</p>\n```","source":"_posts/spooldb1.md","raw":"title: spooldb1\nauthor: John Doe\ndate: 2021-08-16 15:41:31\ntags:\n---\n```\n<p>\nimport os, time, random, threading \nfrom datetime import datetime,timedelta\nfrom concurrent.futures import ThreadPoolExecutor, wait, ALL_COMPLETED\n\ndef long_time_task(ftime):\n    print('Run task %s (%s)...' % (ftime, threading.active_count()))\n    print('thread %s >>> %s' % (threading.current_thread().name, ftime))\n    start = time.time()\n    print(os.system(r\"sqlplus zhanghongjing/zhanghongjing@o39 @D:\\worknote\\zhaobin\\脚本及结果\\20210812丰台数据分析01240-郎维晨\\sp_rtd.sql \" + ftime +\" 30>nul\"))\n    end = time.time()\n    print('Task %s runs %0.2f seconds.' % (ftime, (end - start)))\n    #return res\n\n\n    \nif __name__=='__main__':\n\n\n    start = time.time()\n\n    i = 0\n    startftime = '201901010000'\n    endftime =   '202105312330'\n    \n    #executor = ThreadPoolExecutor(max_workers=25)\n    \n    pars = list()\n    while startftime <= endftime:\n        #t = executor.submit(long_time_task,startftime)\n        #print(\"in main : get page {}s success\".format(t))\n        pars.append(startftime)\n        ftimed = datetime.strptime(startftime,'%Y%m%d%H%M') + timedelta(minutes = 30)\n        i += 1\n        startftime = ftimed.strftime(\"%Y%m%d%H%M\")\n     \n    with ThreadPoolExecutor(max_workers=25) as executor:\n        executor.map(long_time_task,pars)\n        \n    \n    end = time.time()\n    print('All subprocesses done.')\n    print('Task all runs %0.2f seconds.' % ((end - start)))\n</p>\n```","slug":"spooldb1","published":1,"updated":"2021-08-16T07:42:45.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksec1qvv0003qzwbakzg0cob","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">import os, time, random, threading </span><br><span class=\"line\">from datetime import datetime,timedelta</span><br><span class=\"line\">from concurrent.futures import ThreadPoolExecutor, wait, ALL_COMPLETED</span><br><span class=\"line\"></span><br><span class=\"line\">def long_time_task(ftime):</span><br><span class=\"line\">    print(&#x27;Run task %s (%s)...&#x27; % (ftime, threading.active_count()))</span><br><span class=\"line\">    print(&#x27;thread %s &gt;&gt;&gt; %s&#x27; % (threading.current_thread().name, ftime))</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    print(os.system(r&quot;sqlplus zhanghongjing/zhanghongjing@o39 @D:\\worknote\\zhaobin\\脚本及结果\\20210812丰台数据分析01240-郎维晨\\sp_rtd.sql &quot; + ftime +&quot; 30&gt;nul&quot;))</span><br><span class=\"line\">    end = time.time()</span><br><span class=\"line\">    print(&#x27;Task %s runs %0.2f seconds.&#x27; % (ftime, (end - start)))</span><br><span class=\"line\">    #return res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">if __name__==&#x27;__main__&#x27;:</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\"></span><br><span class=\"line\">    i = 0</span><br><span class=\"line\">    startftime = &#x27;201901010000&#x27;</span><br><span class=\"line\">    endftime =   &#x27;202105312330&#x27;</span><br><span class=\"line\">    </span><br><span class=\"line\">    #executor = ThreadPoolExecutor(max_workers=25)</span><br><span class=\"line\">    </span><br><span class=\"line\">    pars = list()</span><br><span class=\"line\">    while startftime &lt;= endftime:</span><br><span class=\"line\">        #t = executor.submit(long_time_task,startftime)</span><br><span class=\"line\">        #print(&quot;in main : get page &#123;&#125;s success&quot;.format(t))</span><br><span class=\"line\">        pars.append(startftime)</span><br><span class=\"line\">        ftimed = datetime.strptime(startftime,&#x27;%Y%m%d%H%M&#x27;) + timedelta(minutes = 30)</span><br><span class=\"line\">        i += 1</span><br><span class=\"line\">        startftime = ftimed.strftime(&quot;%Y%m%d%H%M&quot;)</span><br><span class=\"line\">     </span><br><span class=\"line\">    with ThreadPoolExecutor(max_workers=25) as executor:</span><br><span class=\"line\">        executor.map(long_time_task,pars)</span><br><span class=\"line\">        </span><br><span class=\"line\">    </span><br><span class=\"line\">    end = time.time()</span><br><span class=\"line\">    print(&#x27;All subprocesses done.&#x27;)</span><br><span class=\"line\">    print(&#x27;Task all runs %0.2f seconds.&#x27; % ((end - start)))</span><br><span class=\"line\">&lt;/p&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">import os, time, random, threading </span><br><span class=\"line\">from datetime import datetime,timedelta</span><br><span class=\"line\">from concurrent.futures import ThreadPoolExecutor, wait, ALL_COMPLETED</span><br><span class=\"line\"></span><br><span class=\"line\">def long_time_task(ftime):</span><br><span class=\"line\">    print(&#x27;Run task %s (%s)...&#x27; % (ftime, threading.active_count()))</span><br><span class=\"line\">    print(&#x27;thread %s &gt;&gt;&gt; %s&#x27; % (threading.current_thread().name, ftime))</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    print(os.system(r&quot;sqlplus zhanghongjing/zhanghongjing@o39 @D:\\worknote\\zhaobin\\脚本及结果\\20210812丰台数据分析01240-郎维晨\\sp_rtd.sql &quot; + ftime +&quot; 30&gt;nul&quot;))</span><br><span class=\"line\">    end = time.time()</span><br><span class=\"line\">    print(&#x27;Task %s runs %0.2f seconds.&#x27; % (ftime, (end - start)))</span><br><span class=\"line\">    #return res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">if __name__==&#x27;__main__&#x27;:</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\"></span><br><span class=\"line\">    i = 0</span><br><span class=\"line\">    startftime = &#x27;201901010000&#x27;</span><br><span class=\"line\">    endftime =   &#x27;202105312330&#x27;</span><br><span class=\"line\">    </span><br><span class=\"line\">    #executor = ThreadPoolExecutor(max_workers=25)</span><br><span class=\"line\">    </span><br><span class=\"line\">    pars = list()</span><br><span class=\"line\">    while startftime &lt;= endftime:</span><br><span class=\"line\">        #t = executor.submit(long_time_task,startftime)</span><br><span class=\"line\">        #print(&quot;in main : get page &#123;&#125;s success&quot;.format(t))</span><br><span class=\"line\">        pars.append(startftime)</span><br><span class=\"line\">        ftimed = datetime.strptime(startftime,&#x27;%Y%m%d%H%M&#x27;) + timedelta(minutes = 30)</span><br><span class=\"line\">        i += 1</span><br><span class=\"line\">        startftime = ftimed.strftime(&quot;%Y%m%d%H%M&quot;)</span><br><span class=\"line\">     </span><br><span class=\"line\">    with ThreadPoolExecutor(max_workers=25) as executor:</span><br><span class=\"line\">        executor.map(long_time_task,pars)</span><br><span class=\"line\">        </span><br><span class=\"line\">    </span><br><span class=\"line\">    end = time.time()</span><br><span class=\"line\">    print(&#x27;All subprocesses done.&#x27;)</span><br><span class=\"line\">    print(&#x27;Task all runs %0.2f seconds.&#x27; % ((end - start)))</span><br><span class=\"line\">&lt;/p&gt;</span><br></pre></td></tr></table></figure>"},{"title":"spooldb2","author":"John Doe","date":"2021-08-16T07:43:19.000Z","_content":"```\n<p>\nfrom gevent import monkey\nmonkey.patch_all()\nimport gevent\nfrom datetime import datetime,timedelta\nimport os, time\n\nstartftime = '202101011500'\nendftime =   '202101011700'\nstep = 30\n\ni = 0\nprange = round((datetime.strptime(endftime,'%Y%m%d%H%M').timestamp() - datetime.strptime(startftime,'%Y%m%d%H%M').timestamp())/(step * 60)) + 1\n#print( list((datetime.strptime(startftime,'%Y%m%d%H%M') + timedelta(minutes = i*30)).strftime(\"%Y%m%d%H%M\") for i in (range(prange)) ))\n\ndef task(ftime,step):\n    print('Run task %s ...' % (ftime))\n    start = time.time()\n    gevent.sleep(0)\n    #print(r\"sqlplus zhanghongjing/zhanghongjing@o39 @D:\\worknote\\zhaobin\\脚本及结果\\20210715通州数据分析01182-王鹃\\sp_rtd.sql \" + ftime +\" \" + str(step) +\">nul\")\n    os.system(r\"sqlplus zhanghongjing/zhanghongjing@o39 @D:\\worknote\\zhaobin\\脚本及结果\\20210715通州数据分析01182-王鹃\\sp_rtd.sql \" + ftime +\" \" + str(step) +\" >nul\")\n    end = time.time()\n    print('Task %s runs %0.2f seconds.' % (ftime, (end - start)))\n\nstart_time = time.time()\n\nrqs = list((datetime.strptime(startftime,'%Y%m%d%H%M') + timedelta(minutes = i*step)).strftime(\"%Y%m%d%H%M\") for i in (range(prange)) )\njobs = [gevent.spawn(task, ftime, step) for ftime in rqs]\ngevent.joinall(jobs)\n#[job.value for job in jobs]\nprint(\"all done in %s\" % (time.time() - start_time))\n</p>\n```","source":"_posts/spooldb2.md","raw":"title: spooldb2\nauthor: John Doe\ndate: 2021-08-16 15:43:19\ntags:\n---\n```\n<p>\nfrom gevent import monkey\nmonkey.patch_all()\nimport gevent\nfrom datetime import datetime,timedelta\nimport os, time\n\nstartftime = '202101011500'\nendftime =   '202101011700'\nstep = 30\n\ni = 0\nprange = round((datetime.strptime(endftime,'%Y%m%d%H%M').timestamp() - datetime.strptime(startftime,'%Y%m%d%H%M').timestamp())/(step * 60)) + 1\n#print( list((datetime.strptime(startftime,'%Y%m%d%H%M') + timedelta(minutes = i*30)).strftime(\"%Y%m%d%H%M\") for i in (range(prange)) ))\n\ndef task(ftime,step):\n    print('Run task %s ...' % (ftime))\n    start = time.time()\n    gevent.sleep(0)\n    #print(r\"sqlplus zhanghongjing/zhanghongjing@o39 @D:\\worknote\\zhaobin\\脚本及结果\\20210715通州数据分析01182-王鹃\\sp_rtd.sql \" + ftime +\" \" + str(step) +\">nul\")\n    os.system(r\"sqlplus zhanghongjing/zhanghongjing@o39 @D:\\worknote\\zhaobin\\脚本及结果\\20210715通州数据分析01182-王鹃\\sp_rtd.sql \" + ftime +\" \" + str(step) +\" >nul\")\n    end = time.time()\n    print('Task %s runs %0.2f seconds.' % (ftime, (end - start)))\n\nstart_time = time.time()\n\nrqs = list((datetime.strptime(startftime,'%Y%m%d%H%M') + timedelta(minutes = i*step)).strftime(\"%Y%m%d%H%M\") for i in (range(prange)) )\njobs = [gevent.spawn(task, ftime, step) for ftime in rqs]\ngevent.joinall(jobs)\n#[job.value for job in jobs]\nprint(\"all done in %s\" % (time.time() - start_time))\n</p>\n```","slug":"spooldb2","published":1,"updated":"2021-08-16T07:43:58.442Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksec1qvx0004qzwb6ziydb44","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">from gevent import monkey</span><br><span class=\"line\">monkey.patch_all()</span><br><span class=\"line\">import gevent</span><br><span class=\"line\">from datetime import datetime,timedelta</span><br><span class=\"line\">import os, time</span><br><span class=\"line\"></span><br><span class=\"line\">startftime = &#x27;202101011500&#x27;</span><br><span class=\"line\">endftime =   &#x27;202101011700&#x27;</span><br><span class=\"line\">step = 30</span><br><span class=\"line\"></span><br><span class=\"line\">i = 0</span><br><span class=\"line\">prange = round((datetime.strptime(endftime,&#x27;%Y%m%d%H%M&#x27;).timestamp() - datetime.strptime(startftime,&#x27;%Y%m%d%H%M&#x27;).timestamp())/(step * 60)) + 1</span><br><span class=\"line\">#print( list((datetime.strptime(startftime,&#x27;%Y%m%d%H%M&#x27;) + timedelta(minutes = i*30)).strftime(&quot;%Y%m%d%H%M&quot;) for i in (range(prange)) ))</span><br><span class=\"line\"></span><br><span class=\"line\">def task(ftime,step):</span><br><span class=\"line\">    print(&#x27;Run task %s ...&#x27; % (ftime))</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    gevent.sleep(0)</span><br><span class=\"line\">    #print(r&quot;sqlplus zhanghongjing/zhanghongjing@o39 @D:\\worknote\\zhaobin\\脚本及结果\\20210715通州数据分析01182-王鹃\\sp_rtd.sql &quot; + ftime +&quot; &quot; + str(step) +&quot;&gt;nul&quot;)</span><br><span class=\"line\">    os.system(r&quot;sqlplus zhanghongjing/zhanghongjing@o39 @D:\\worknote\\zhaobin\\脚本及结果\\20210715通州数据分析01182-王鹃\\sp_rtd.sql &quot; + ftime +&quot; &quot; + str(step) +&quot; &gt;nul&quot;)</span><br><span class=\"line\">    end = time.time()</span><br><span class=\"line\">    print(&#x27;Task %s runs %0.2f seconds.&#x27; % (ftime, (end - start)))</span><br><span class=\"line\"></span><br><span class=\"line\">start_time = time.time()</span><br><span class=\"line\"></span><br><span class=\"line\">rqs = list((datetime.strptime(startftime,&#x27;%Y%m%d%H%M&#x27;) + timedelta(minutes = i*step)).strftime(&quot;%Y%m%d%H%M&quot;) for i in (range(prange)) )</span><br><span class=\"line\">jobs = [gevent.spawn(task, ftime, step) for ftime in rqs]</span><br><span class=\"line\">gevent.joinall(jobs)</span><br><span class=\"line\">#[job.value for job in jobs]</span><br><span class=\"line\">print(&quot;all done in %s&quot; % (time.time() - start_time))</span><br><span class=\"line\">&lt;/p&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">from gevent import monkey</span><br><span class=\"line\">monkey.patch_all()</span><br><span class=\"line\">import gevent</span><br><span class=\"line\">from datetime import datetime,timedelta</span><br><span class=\"line\">import os, time</span><br><span class=\"line\"></span><br><span class=\"line\">startftime = &#x27;202101011500&#x27;</span><br><span class=\"line\">endftime =   &#x27;202101011700&#x27;</span><br><span class=\"line\">step = 30</span><br><span class=\"line\"></span><br><span class=\"line\">i = 0</span><br><span class=\"line\">prange = round((datetime.strptime(endftime,&#x27;%Y%m%d%H%M&#x27;).timestamp() - datetime.strptime(startftime,&#x27;%Y%m%d%H%M&#x27;).timestamp())/(step * 60)) + 1</span><br><span class=\"line\">#print( list((datetime.strptime(startftime,&#x27;%Y%m%d%H%M&#x27;) + timedelta(minutes = i*30)).strftime(&quot;%Y%m%d%H%M&quot;) for i in (range(prange)) ))</span><br><span class=\"line\"></span><br><span class=\"line\">def task(ftime,step):</span><br><span class=\"line\">    print(&#x27;Run task %s ...&#x27; % (ftime))</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    gevent.sleep(0)</span><br><span class=\"line\">    #print(r&quot;sqlplus zhanghongjing/zhanghongjing@o39 @D:\\worknote\\zhaobin\\脚本及结果\\20210715通州数据分析01182-王鹃\\sp_rtd.sql &quot; + ftime +&quot; &quot; + str(step) +&quot;&gt;nul&quot;)</span><br><span class=\"line\">    os.system(r&quot;sqlplus zhanghongjing/zhanghongjing@o39 @D:\\worknote\\zhaobin\\脚本及结果\\20210715通州数据分析01182-王鹃\\sp_rtd.sql &quot; + ftime +&quot; &quot; + str(step) +&quot; &gt;nul&quot;)</span><br><span class=\"line\">    end = time.time()</span><br><span class=\"line\">    print(&#x27;Task %s runs %0.2f seconds.&#x27; % (ftime, (end - start)))</span><br><span class=\"line\"></span><br><span class=\"line\">start_time = time.time()</span><br><span class=\"line\"></span><br><span class=\"line\">rqs = list((datetime.strptime(startftime,&#x27;%Y%m%d%H%M&#x27;) + timedelta(minutes = i*step)).strftime(&quot;%Y%m%d%H%M&quot;) for i in (range(prange)) )</span><br><span class=\"line\">jobs = [gevent.spawn(task, ftime, step) for ftime in rqs]</span><br><span class=\"line\">gevent.joinall(jobs)</span><br><span class=\"line\">#[job.value for job in jobs]</span><br><span class=\"line\">print(&quot;all done in %s&quot; % (time.time() - start_time))</span><br><span class=\"line\">&lt;/p&gt;</span><br></pre></td></tr></table></figure>"},{"title":"test","date":"2021-08-13T16:38:46.000Z","_content":"new test\n","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2021-08-14 00:38:46\ntags:\n---\nnew test\n","slug":"test","published":1,"updated":"2021-08-13T16:39:31.654Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksec1qvy0005qzwb71548mn6","content":"<p>new test</p>\n","site":{"data":{}},"excerpt":"","more":"<p>new test</p>\n"},{"title":"我的第一篇博文","date":"2021-08-11T06:54:26.000Z","_content":"## 第一章\n内容\n\n## 第二章\n\n内容\n\n\n","source":"_posts/我的第一篇博文.md","raw":"---\ntitle: 我的第一篇博文\ndate: 2021-08-11 14:54:26\ntags:\n---\n## 第一章\n内容\n\n## 第二章\n\n内容\n\n\n","slug":"我的第一篇博文","published":1,"updated":"2021-08-13T16:03:15.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksec1qw00006qzwbdoyd8a6f","content":"<h2 id=\"第一章\"><a href=\"#第一章\" class=\"headerlink\" title=\"第一章\"></a>第一章</h2><p>内容</p>\n<h2 id=\"第二章\"><a href=\"#第二章\" class=\"headerlink\" title=\"第二章\"></a>第二章</h2><p>内容</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"第一章\"><a href=\"#第一章\" class=\"headerlink\" title=\"第一章\"></a>第一章</h2><p>内容</p>\n<h2 id=\"第二章\"><a href=\"#第二章\" class=\"headerlink\" title=\"第二章\"></a>第二章</h2><p>内容</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}